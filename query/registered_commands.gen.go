// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"streambot/models"
)

func newRegisteredCommand(db *gorm.DB, opts ...gen.DOOption) registeredCommand {
	_registeredCommand := registeredCommand{}

	_registeredCommand.registeredCommandDo.UseDB(db, opts...)
	_registeredCommand.registeredCommandDo.UseModel(&models.RegisteredCommand{})

	tableName := _registeredCommand.registeredCommandDo.TableName()
	_registeredCommand.ALL = field.NewAsterisk(tableName)
	_registeredCommand.ID = field.NewString(tableName, "id")
	_registeredCommand.CreatedAt = field.NewTime(tableName, "created_at")
	_registeredCommand.UpdatedAt = field.NewTime(tableName, "updated_at")
	_registeredCommand.DeletedAt = field.NewField(tableName, "deleted_at")
	_registeredCommand.GuildID = field.NewString(tableName, "guild_id")

	_registeredCommand.fillFieldMap()

	return _registeredCommand
}

type registeredCommand struct {
	registeredCommandDo

	ALL       field.Asterisk
	ID        field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	GuildID   field.String

	fieldMap map[string]field.Expr
}

func (r registeredCommand) Table(newTableName string) *registeredCommand {
	r.registeredCommandDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registeredCommand) As(alias string) *registeredCommand {
	r.registeredCommandDo.DO = *(r.registeredCommandDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registeredCommand) updateTableName(table string) *registeredCommand {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.GuildID = field.NewString(table, "guild_id")

	r.fillFieldMap()

	return r
}

func (r *registeredCommand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registeredCommand) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["guild_id"] = r.GuildID
}

func (r registeredCommand) clone(db *gorm.DB) registeredCommand {
	r.registeredCommandDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registeredCommand) replaceDB(db *gorm.DB) registeredCommand {
	r.registeredCommandDo.ReplaceDB(db)
	return r
}

type registeredCommandDo struct{ gen.DO }

type IRegisteredCommandDo interface {
	gen.SubQuery
	Debug() IRegisteredCommandDo
	WithContext(ctx context.Context) IRegisteredCommandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegisteredCommandDo
	WriteDB() IRegisteredCommandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegisteredCommandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegisteredCommandDo
	Not(conds ...gen.Condition) IRegisteredCommandDo
	Or(conds ...gen.Condition) IRegisteredCommandDo
	Select(conds ...field.Expr) IRegisteredCommandDo
	Where(conds ...gen.Condition) IRegisteredCommandDo
	Order(conds ...field.Expr) IRegisteredCommandDo
	Distinct(cols ...field.Expr) IRegisteredCommandDo
	Omit(cols ...field.Expr) IRegisteredCommandDo
	Join(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo
	Group(cols ...field.Expr) IRegisteredCommandDo
	Having(conds ...gen.Condition) IRegisteredCommandDo
	Limit(limit int) IRegisteredCommandDo
	Offset(offset int) IRegisteredCommandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisteredCommandDo
	Unscoped() IRegisteredCommandDo
	Create(values ...*models.RegisteredCommand) error
	CreateInBatches(values []*models.RegisteredCommand, batchSize int) error
	Save(values ...*models.RegisteredCommand) error
	First() (*models.RegisteredCommand, error)
	Take() (*models.RegisteredCommand, error)
	Last() (*models.RegisteredCommand, error)
	Find() ([]*models.RegisteredCommand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RegisteredCommand, err error)
	FindInBatches(result *[]*models.RegisteredCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RegisteredCommand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegisteredCommandDo
	Assign(attrs ...field.AssignExpr) IRegisteredCommandDo
	Joins(fields ...field.RelationField) IRegisteredCommandDo
	Preload(fields ...field.RelationField) IRegisteredCommandDo
	FirstOrInit() (*models.RegisteredCommand, error)
	FirstOrCreate() (*models.RegisteredCommand, error)
	FindByPage(offset int, limit int) (result []*models.RegisteredCommand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegisteredCommandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r registeredCommandDo) Debug() IRegisteredCommandDo {
	return r.withDO(r.DO.Debug())
}

func (r registeredCommandDo) WithContext(ctx context.Context) IRegisteredCommandDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registeredCommandDo) ReadDB() IRegisteredCommandDo {
	return r.Clauses(dbresolver.Read)
}

func (r registeredCommandDo) WriteDB() IRegisteredCommandDo {
	return r.Clauses(dbresolver.Write)
}

func (r registeredCommandDo) Session(config *gorm.Session) IRegisteredCommandDo {
	return r.withDO(r.DO.Session(config))
}

func (r registeredCommandDo) Clauses(conds ...clause.Expression) IRegisteredCommandDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registeredCommandDo) Returning(value interface{}, columns ...string) IRegisteredCommandDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registeredCommandDo) Not(conds ...gen.Condition) IRegisteredCommandDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registeredCommandDo) Or(conds ...gen.Condition) IRegisteredCommandDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registeredCommandDo) Select(conds ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registeredCommandDo) Where(conds ...gen.Condition) IRegisteredCommandDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registeredCommandDo) Order(conds ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registeredCommandDo) Distinct(cols ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registeredCommandDo) Omit(cols ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registeredCommandDo) Join(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registeredCommandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registeredCommandDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registeredCommandDo) Group(cols ...field.Expr) IRegisteredCommandDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registeredCommandDo) Having(conds ...gen.Condition) IRegisteredCommandDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registeredCommandDo) Limit(limit int) IRegisteredCommandDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registeredCommandDo) Offset(offset int) IRegisteredCommandDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registeredCommandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegisteredCommandDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registeredCommandDo) Unscoped() IRegisteredCommandDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registeredCommandDo) Create(values ...*models.RegisteredCommand) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registeredCommandDo) CreateInBatches(values []*models.RegisteredCommand, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registeredCommandDo) Save(values ...*models.RegisteredCommand) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registeredCommandDo) First() (*models.RegisteredCommand, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RegisteredCommand), nil
	}
}

func (r registeredCommandDo) Take() (*models.RegisteredCommand, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RegisteredCommand), nil
	}
}

func (r registeredCommandDo) Last() (*models.RegisteredCommand, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RegisteredCommand), nil
	}
}

func (r registeredCommandDo) Find() ([]*models.RegisteredCommand, error) {
	result, err := r.DO.Find()
	return result.([]*models.RegisteredCommand), err
}

func (r registeredCommandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RegisteredCommand, err error) {
	buf := make([]*models.RegisteredCommand, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registeredCommandDo) FindInBatches(result *[]*models.RegisteredCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registeredCommandDo) Attrs(attrs ...field.AssignExpr) IRegisteredCommandDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registeredCommandDo) Assign(attrs ...field.AssignExpr) IRegisteredCommandDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registeredCommandDo) Joins(fields ...field.RelationField) IRegisteredCommandDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registeredCommandDo) Preload(fields ...field.RelationField) IRegisteredCommandDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registeredCommandDo) FirstOrInit() (*models.RegisteredCommand, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RegisteredCommand), nil
	}
}

func (r registeredCommandDo) FirstOrCreate() (*models.RegisteredCommand, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RegisteredCommand), nil
	}
}

func (r registeredCommandDo) FindByPage(offset int, limit int) (result []*models.RegisteredCommand, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registeredCommandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registeredCommandDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registeredCommandDo) Delete(models ...*models.RegisteredCommand) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registeredCommandDo) withDO(do gen.Dao) *registeredCommandDo {
	r.DO = *do.(*gen.DO)
	return r
}
